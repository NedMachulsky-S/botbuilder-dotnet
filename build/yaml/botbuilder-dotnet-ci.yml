#
# Replaces the classic BotBuilder-DotNet-master-CI-PR
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  name: Hosted Windows 2019 with VS2019
  demands:
  - msbuild
  - visualstudio

# No "paths exclude" here: not supported by github required status checks.
trigger: # ci trigger
  branches:
    include:
     - master

pr: # pr trigger
  branches:
    include:
     - master

variables:
  ApiCompatVersion: 4.6.3
  BotBuilderDll: Microsoft.Bot.Builder.AI.Luis,Microsoft.Bot.Builder.AI.QnA,Microsoft.Bot.Builder.ApplicationInsights,Microsoft.Bot.Builder.Azure,Microsoft.Bot.Builder.Dialogs,Microsoft.Bot.Builder.Integration.ApplicationInsights.Core,Microsoft.Bot.Builder.Integration.AspNet.Core,Microsoft.Bot.Builder.TemplateManager,Microsoft.Bot.Builder.Testing,Microsoft.Bot.Builder,Microsoft.Bot.Configuration,Microsoft.Bot.Connector,Microsoft.Bot.Schema,Microsoft.Bot.Streaming
  BuildConfiguration: Debug-Windows
  BuildPlatform: any cpu
#  DotNetCoverallsToken: define this in Azure
#  GitHubCommentApiKey: define this in Azure
  IsBuildServer: true # This activates package versioning in the projects in Microsoft.Bot.Builder.sln.
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false
  Parameters.solution: Microsoft.Bot.Builder.sln
  PreviewPackageVersion: 4.9.0-preview-$(Build.BuildNumber) # This is consumed by projects in Microsoft.Bot.Builder.sln.
  ReleasePackageVersion: 4.9.0-preview-$(Build.BuildNumber) # This is consumed by projects in Microsoft.Bot.Builder.sln.
  runCodesignValidationInjection: false # Disables unnecessary CodeSign Validation step

# The following 2 stages run multi-configuration, multi-agent parallel jobs.
# Debug-Windows/Release-Windows => Builds everything in Debug/Release + the ASP.NET Desktop.
# Debug/Release => would build all .NET Standard libs and test them.
# The .NET 4.X asp.net integrations libraries do not build and test on non-windows boxes.
# If we drop support for .NET 4.x then we can drop to just Debug/Release.

stages:
  - stage: Build
    jobs:
      - job: builds_and_tests
        steps:
        - powershell: 'gci env:* | sort-object name | Format-Table -AutoSize -Wrap'
          displayName: 'Display env vars'

        # Variables ReleasePackageVersion and PreviewPackageVersion are consumed by projects in Microsoft.Bot.Builder.sln.
        # For the signed build, they should be settable at queue time. To set that up, define the variables in Azure on the Variables tab.
        - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
          displayName: 'Tag build with package version'
          inputs:
            tags: 'Version=$(ReleasePackageVersion)'
          continueOnError: true
      
        - task: NuGetToolInstaller@0
          displayName: 'Use NuGet 4.9.1'
          inputs:
            versionSpec: 4.9.1

        - task: NuGetCommand@2
          displayName: 'NuGet restore'
          inputs:
            restoreSolution: '$(Parameters.solution)'

        - task: Npm@1
          displayName: 'install botframework-cli to set up for Schema merge tests.'
          inputs:
            command: custom
            verbose: false
            customCommand: 'install -g @microsoft/botframework-cli@next'

        - script: |
            echo ##vso[task.setvariable variable=BuildConfiguration]Release-Windows
          displayName: Assign Release Variables

        - task: VSBuild@1
          displayName: 'Build solution Microsoft.Bot.Builder.sln'
          inputs:
            solution: '$(Parameters.solution)'
            vsVersion: 16.0
            msbuildArgs: '$(MSBuildArguments)'
            platform: '$(BuildPlatform)'
            configuration: '$(BuildConfiguration)'
            maximumCpuCount: true
            logProjectEvents: false

        - powershell: |
            Remove-Item CodeCoverage -Force -Recurse -ErrorAction Ignore
            New-Item CodeCoverage -ItemType Directory -Force
          displayName: 'Create Code Coverage directory'

        - task: DotNetCoreCLI@2
          displayName: 'dotnet test (release)'
          inputs:
            command: test
            projects: |
              Tests/**/*Tests.csproj
            
            arguments: '-v n --configuration release --no-build --no-restore --filter "TestCategory!=IgnoreInAutomatedBuild&TestCategory!=FunctionalTests" --collect:"Code Coverage" --settings $(Build.SourcesDirectory)\CodeCoverage.runsettings'
          condition: eq(variables['BuildConfiguration'],'Release-Windows')

        - powershell: |
            # This task copies the code coverage file created by dotnet test into a well known location. In all
            # checks I've done, dotnet test ALWAYS outputs the coverage file to the temp directory. 
            # My attempts to override this and have it go directly to the CodeCoverage directory have
            # all failed, so I'm just doing the copy here.  (cmullins)
            
            Get-ChildItem -Path "D:\a\_temp" -Include "*.coverage" -Recurse | Copy-Item -Destination CodeCoverage
          displayName: 'Copy .coverage Files to CodeCoverage folder'

        - powershell: 'echo ''##vso[task.setvariable variable=CoverallsToken]$(DotNetCoverallsToken)'''
          displayName: 'Set CoverallsToken for PublishToCoveralls.ps1 if token exists'
          continueOnError: true
          condition: succeeded()

        - task: PowerShell@2
          displayName: 'Upload Coverage Files to Coveralls.io https://coveralls.io/github/microsoft/botbuilder-dotnet'
          inputs:
            targetType: filePath
            filePath: '$(Build.SourcesDirectory)\build\PublishToCoveralls.ps1'
            arguments: '-pathToCoverageFiles "$(Build.SourcesDirectory)\CodeCoverage" -serviceName "master CI-PR"'
          continueOnError: true
          condition: and(succeeded(), ne(variables['CoverallsToken'], ''))

        - template: ci-test-steps.yml

        - script: |
            echo ##vso[task.setvariable variable=BuildConfiguration]Debug-Windows
          displayName: Assign Debug Variables

        - task: VSBuild@1
          displayName: 'Build solution Microsoft.Bot.Builder.sln'
          inputs:
            solution: '$(Parameters.solution)'
            vsVersion: 16.0
            msbuildArgs: '$(MSBuildArguments)'
            platform: '$(BuildPlatform)'
            configuration: '$(BuildConfiguration)'
            maximumCpuCount: true
            logProjectEvents: false

        - template: ci-test-steps.yml

        - script: |
            cd ..
            dir *.* /s
          displayName: 'Dir workspace'
          continueOnError: true
          condition: succeededOrFailed()

  - stage: API_Compatibility_Validation
    dependsOn: Build
    jobs:
      - job: Check_API_for_libraries
        timeoutInMinutes: 10
        steps:
        - template: ci-api-validation-steps.yml
          parameters:
            libraries: 
            - Microsoft.Bot.Builder.AI.Luis
            - Microsoft.Bot.Builder.AI.QnA
            - Microsoft.Bot.Builder.ApplicationInsights
            - Microsoft.Bot.Builder.Azure
            - Microsoft.Bot.Builder.Dialogs
            - Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
            - Microsoft.Bot.Builder.Integration.AspNet.Core
            - Microsoft.Bot.Builder.TemplateManager
            - Microsoft.Bot.Builder.Testing
            - Microsoft.Bot.Builder
            - Microsoft.Bot.Configuration
            - Microsoft.Bot.Connector
            - Microsoft.Bot.Schema
            - Microsoft.Bot.Streaming
