
# TODO: Write logs

steps:
- task: DownloadPipelineArtifact@1
  displayName: 'Download BotBuilderDLLs artifact'
  inputs:
    artifactName: 'BotBuilderDLLs-Debug-Windows-netcoreapp31'
    targetPath: '$(System.ArtifactsDirectory)/Artifacts'

- powershell: |
    $xml = "<?xml version=""1.0"" encoding=""utf-8""?>`n<packages>`n"

    $env:BotBuilderDll.Split(",") | ForEach-Object {
      $library = $_.Trim()
      $xml += "  <package id=""" + $library + """ version=""" + $env:ApiCompatVersion + """/>`n"
    }
    $xml += "</packages>"
    New-Item -Path $(System.DefaultWorkingDirectory) -Name "packages.config" -ItemType "file" -Value $xml -Force
    
    $xml
  displayName: 'Generate NuGet packages.config File'

- task: NuGetCommand@2
  displayName: 'NuGet Install Packages'
  inputs:
    command: custom
    arguments: 'install $(System.DefaultWorkingDirectory)\packages.config -OutputDirectory $(System.DefaultWorkingDirectory)\DownloadedNuGet'

- task: CmdLine@1
  displayName: 'Run dir'
  inputs:
    filename: dir
    arguments: '..\*.* /s'
  enabled: false

- powershell: |
    $libraries = ($env:BotBuilderDll -replace ",", ".dll ") + ".dll"

    Write-Host "##vso[task.setvariable variable=librariesToCompare]$libraries"

    $path = "DownloadedNuGet\**\lib\netstandard2.0\*"

    If (!(Test-Path "LibrariesToCompare\")) {
      New-Item -Path "LibrariesToCompare\" -ItemType Directory
    }

    Copy-Item -Path $path -Destination "LibrariesToCompare\" -Recurse -Force

  displayName: 'Prepare Nuget Libraries to Binary Compare'

- task: CmdLine@1
  displayName: 'Run dir'
  inputs:
    filename: dir
    arguments: 'LibrariesToCompare\*.* /s'

- task: SOUTHWORKS.binaries-comparer.custom-build-release-task.binaries-comparer@0
  displayName: 'Compare Binaries'
  inputs:
    contractsRootFolder: 'LibrariesToCompare\'
    contractsFileName: '$(librariesToCompare)'
    implFolder: '$(System.ArtifactsDirectory)/Artifacts'
    failOnIssue: true
    resolveFx: false
    generateLog: true
    outputFilename: 'CompatResults.txt'
    outputFolder: '$(Build.ArtifactStagingDirectory)'
    useBaseline: false

- powershell: |
    $FileName = "$(Build.ArtifactStagingDirectory)\CompatResults.txt"
    $FileContent = @(Get-Content $FileName)
    
    $FileContent
  displayName: 'Insert nuget link into ApiCompat results file.'

# :heavy_check_mark: No Binary Compatibility issues for **Microsoft.Bot.Builder.AI.Luis.dll Microsoft.Bot.Builder.AI.QnA.dll Microsoft.Bot.Builder.ApplicationInsights.dll Microsoft.Bot.Builder.Azure.dll Microsoft.Bot.Builder.Dialogs.dll Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.dll Microsoft.Bot.Builder.Integration.AspNet.Core.dll Microsoft.Bot.Builder.TemplateManager.dll Microsoft.Bot.Builder.Testing.dll Microsoft.Bot.Builder.dll Microsoft.Bot.Configuration.dll Microsoft.Bot.Connector.dll Microsoft.Bot.Schema.dll Microsoft.Bot.Streaming.dll**


# :heavy_check_mark: No Binary Compatibility issues for **Microsoft.Bot.Builder.AI.Luis.dll** compared against [version 4.6.3](https://www.nuget.org/packages/Microsoft.Bot.Builder.AI.Luis/4.6.3)[0]


# - powershell: |
#     $FileName = "$(Build.ArtifactStagingDirectory)\CompatResults.txt"
#     $FileContent = @(Get-Content $FileName)
      
#     # $FileContent[0] = $FileContent[0] + " compared against [version $(ApiCompatVersion)](https://www.nuget.org/packages/${{ library }}/$(ApiCompatVersion))"
      
#     # if ($FileContent.Length -eq 1) {
#     # [system.io.file]::WriteAllText($fileName,$FileContent)
#     # } else {
#     # Set-Content $fileName $FileContent
#     # }
    
#     # Write-Host "The updated line 1: `n$FileContent[0]"

#     ForEach ($line in $(FileContent)) {
#       $a = 
#     } 

#   displayName: 'Insert nuget link into ApiCompat results file.'

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Compat Results artifact'
#   inputs:
#     ArtifactName: '${{ library }}.$(ApiCompatVersion).CompatResults'

- script: |
   cd ..
   dir /s
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()
